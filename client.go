package main

import (
	"errors"
	v5 "github.com/godbus/dbus/v5"
)

// DO NOT EDIT; AUTOGENERATED ON Thu Jun 19 16:48:36 2025
const (
	OrcaServiceName = "org.gnome.Orca.Service"
	OrcaObjectPath  = "/org/gnome/Orca/Service"
)

type OrcaClient struct {
	conn                      *v5.Conn
	SpeechAndVerbosityManager SpeechAndVerbosityManager
}
type SpeechAndVerbosityManager struct {
	conn *v5.Conn
}

// Changes spoken number style between digits and words.
func (c *SpeechAndVerbosityManager) ChangeNumberStyle() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Cycle through the speech-dispatcher capitalization styles.
func (c *SpeechAndVerbosityManager) CycleCapitalizationStyle() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Cycle through the key echo levels.
func (c *SpeechAndVerbosityManager) CycleKeyEcho() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Cycles through punctuation levels for speech.
func (c *SpeechAndVerbosityManager) CyclePunctuationLevel() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Cycles through available speech synthesizers.
func (c *SpeechAndVerbosityManager) CycleSynthesizer() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Decreases the speech pitch
func (c *SpeechAndVerbosityManager) DecreasePitch() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Decreases the speech rate
func (c *SpeechAndVerbosityManager) DecreaseRate() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Decreases the speech volume
func (c *SpeechAndVerbosityManager) DecreaseVolume() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Increase the speech pitch
func (c *SpeechAndVerbosityManager) IncreasePitch() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Increases the speech rate.
func (c *SpeechAndVerbosityManager) IncreaseRate() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Increases the speech volume
func (c *SpeechAndVerbosityManager) IncreaseVolume() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Interrupts the speech server.
func (c *SpeechAndVerbosityManager) InterruptSpeech() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Shuts down and re-initializes speech.
func (c *SpeechAndVerbosityManager) RefreshSpeech() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Shuts down the speech server.
func (c *SpeechAndVerbosityManager) ShutdownSpeech() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Starts the speech server.
func (c *SpeechAndVerbosityManager) StartSpeech() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Toggles the speaking of indentation and justification.
func (c *SpeechAndVerbosityManager) ToggleIndentationAndJustification() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Toggles speech on and off.
func (c *SpeechAndVerbosityManager) ToggleSpeech() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Toggles between speak cell and speak row.
func (c *SpeechAndVerbosityManager) ToggleTableCellReadingMode() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}

// Toggles speech verbosity level between verbose and brief.
func (c *SpeechAndVerbosityManager) ToggleVerbosity() error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (errors.New("command failed"))
	}
	return nil
}
